diff --git a/examples/Animations.cpp b/examples/Animations.cpp
index 3f285db..6456e57 100644
--- a/examples/Animations.cpp
+++ b/examples/Animations.cpp
@@ -12,8 +12,9 @@ void addFrames(thor::FrameAnimation& animation, int x, int yFirst, int yLast, fl
 	const int step = (yFirst < yLast) ? +1 : -1;
 	yLast += step; // so yLast is excluded in the range
 
+	// center animation
 	for (int y = yFirst; y != yLast; y += step)
-		animation.addFrame(duration, sf::IntRect(36*x, 39*y, 36, 39));
+		animation.addFrame(duration, sf::IntRect(36*x, 39*y, 36, 39), sf::Vector2f(18.f, 19.5f));
 }
 
 int main()
@@ -123,4 +124,4 @@ int main()
 		window.draw(sprite);
 		window.display();
 	}	
-}
\ No newline at end of file
+}
diff --git a/include/Thor/Animations/FrameAnimation.hpp b/include/Thor/Animations/FrameAnimation.hpp
index bf30caf..3a6c1db 100644
--- a/include/Thor/Animations/FrameAnimation.hpp
+++ b/include/Thor/Animations/FrameAnimation.hpp
@@ -46,14 +46,16 @@ namespace detail
 	// Class that stores a single frame of FrameAnimation
 	struct Frame
 	{
-		Frame(float duration, const sf::IntRect& subrect)
+		Frame(float duration, const sf::IntRect& subrect, const sf::Vector2f& origin)
 		: duration(duration)
 		, subrect(subrect)
+		, origin(origin)
 		{
 		}
 
 		mutable float			duration;
 		sf::IntRect				subrect;
+		sf::Vector2f			origin;
 	};
 
 } // namespace detail
@@ -76,15 +78,21 @@ class THOR_API FrameAnimation
 		/// 
 									FrameAnimation();
 
-		/// @brief Adds a frame to the animation, changes only the sub-rect.
+		/// @brief Adds a frame to the animation, changes only the sub-rect. If not specified, the topleft corner is used as origin.
 		/// @param relativeDuration Duration of the frame relative to the other durations.
 		/// @param subrect %Rectangle of the sf::Texture that is used for the new frame.
 		void						addFrame(float relativeDuration, const sf::IntRect& subrect);
 
+		/// @brief Overload to addFrame for using a customized frame origin
+		/// @param relativeDuration Duration of the frame relative to the other durations.
+		/// @param subrect %Rectangle of the sf::Texture that is used for the new frame.
+		/// @param origin Origin of the frame used for rendering
+		void						addFrame(float relativeDuration, const sf::IntRect& subrect, const sf::Vector2f& origin);
+
 		/// @brief Animates the object.
 		/// @param animated Object to animate.
 		/// @param progress Value in [0,1] determining the progress of the animation.
-		/// @tparam Animated Class with member function <i>void setTextureRect(sf::IntRect)</i>, for example sf::Sprite.
+		/// @tparam Animated Class with member function <i>void setTextureRect(sf::IntRect)</i> and <i>void setOrigin(sf::Vector2f)</i>, for example sf::Sprite.
 		template <class Animated>
 		void						operator() (Animated& animated, float progress) const;
 
@@ -122,6 +130,7 @@ void FrameAnimation::operator() (Animated& target, float progress) const
 		if (progress < 0.f)
 		{
 			target.setTextureRect(frame.subrect);
+			target.setOrigin(frame.origin);
 			break;
 		}
 	}
diff --git a/src/FrameAnimation.cpp b/src/FrameAnimation.cpp
index 623a160..343c3a1 100644
--- a/src/FrameAnimation.cpp
+++ b/src/FrameAnimation.cpp
@@ -37,7 +37,12 @@ FrameAnimation::FrameAnimation()
 
 void FrameAnimation::addFrame(float relativeDuration, const sf::IntRect& subrect)
 {
-	mFrames.push_back(detail::Frame(relativeDuration, subrect));
+	addFrame(relativeDuration, subrect, sf::Vector2f(0.f, 0.f));
+}
+
+void FrameAnimation::addFrame(float relativeDuration, const sf::IntRect& subrect, const sf::Vector2f& origin)
+{
+	mFrames.push_back(detail::Frame(relativeDuration, subrect, origin));
 	mNormalized = false;
 }
 
